version: '3.7'
services:
    discord-2000:
        container_name: 'discord-2000'
        user: node

        build:
            context: .
            dockerfile: Dockerfile
            args:
                - TOKEN=${TOKEN}
                - CMD_PREFIX=${CMD_PREFIX}
                - PRESENCE_TEXT_CHANNEL_UPDATES=${PRESENCE_TEXT_CHANNEL_UPDATES}
                - ENABLE_PRESENCE_UPDATES=${ENABLE_PRESENCE_UPDATES}
                - TIMEZONE=${TIMEZONE}
                - NODE_ENV=production
        networks:
            - nasdc-private-net
        volumes:
            - .:/app
            - /app/node_modules
        environment:
            - TOKEN=${TOKEN}
            - CMD_PREFIX=${CMD_PREFIX}
            - PRESENCE_TEXT_CHANNEL_UPDATES=${PRESENCE_TEXT_CHANNEL_UPDATES}
            - ENABLE_PRESENCE_UPDATES=${ENABLE_PRESENCE_UPDATES}
            - TIMEZONE=${TIMEZONE}
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_HOST=${POSTGRES_HOST}
            - NODE_ENV=production

        restart: always
        command: bash -c "/usr/wait-for-it.sh -t 0 ${POSTGRES_HOST}:5432 -- npm run start"

    discord-2000-postgres:
        container_name: ${POSTGRES_HOST}
        image: postgres:13.1
        restart: unless-stopped
        environment:
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_DB=${POSTGRES_DB}
            - PGDATA=/var/lib/postgresql/data/pgdata
        volumes:
            - ./postgres/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
            - postgres:/var/lib/postgresql/data
        networks:
            - nasdc-private-net

volumes:
    postgres:

networks:
    nasdc-private-net:
        external: true
