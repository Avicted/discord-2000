version: '3.7'
services:
    discord-2000:
        container_name: 'discord-2000'
        user: node

        build:
            context: .
            dockerfile: Dockerfile
            args:
                - token=${token}
                - cmdPrefix=${cmdPrefix}
                - presence_text_channel_updates=${presence_text_channel_updates}
                - enable_presence_updates=${enable_presence_updates}
                - timezone=${timezone}
                - NODE_ENV=production

        network_mode: host

        volumes:
            - .:/app
            - /app/node_modules

        environment:
            - token=${token}
            - cmdPrefix=${cmdPrefix}
            - presence_text_channel_updates=${presence_text_channel_updates}
            - enable_presence_updates=${enable_presence_updates}
            - timezone=${timezone}
            - postgres_db=${postgres_db}
            - postgres_user=${postgres_user}
            - postgres_password=${postgres_password}
            - postgres_host=${postgres_host}
            - NODE_ENV=production

        restart: always
        command: bash -c "/usr/wait-for-it.sh -t 0 localhost:5432 -- npm run start"

    postgres:
        container_name: 'postgres'
        build:
            context: ..
            dockerfile: postgres/Dockerfile
        restart: unless-stopped
        environment:
            - POSTGRES_USER=${postgres_user}
            - POSTGRES_PASSWORD=${postgres_password}
            - POSTGRES_DB=${postgres_db}
            - PGDATA=/var/lib/postgresql/data/pgdata
        volumes:
            - ${PWD}/postgres/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
            - postgres:/var/lib/postgresql/data
        ports:
            - 5432:5432

volumes:
    postgres:
